{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2022-07-08T00:39:31.352Z",
    "end": "2022-07-08T00:39:36.101Z",
    "duration": 4624,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6aa4cbd0-64ca-4a2e-ae2f-2044e2ee20e6",
      "title": "",
      "fullFile": "cypress/e2e/reqres.cy.ts",
      "file": "cypress/e2e/reqres.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
          "title": "ReqRes API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API GET to /users should return status 200 and a list of users",
              "timedOut": null,
              "duration": 146,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/users',\n    method: 'GET',\n    qs: { page: 2 },\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.page).to.equal(2);\n    expect(responseBody.per_page).to.equal(6);\n    expect(responseBody.total).to.equal(12);\n    expect(responseBody.total_pages).to.equal(2);\n    expect(responseBody.data).to.have.lengthOf(6);\n    for (let i = 0; i < fixtures.users.length; i += 1) {\n        const responseUsersData = responseBody.data;\n        expect(responseUsersData[i].id).to.equal(fixtures.users[i].id);\n        expect(responseUsersData[i].email).to.equal(fixtures.users[i].email);\n        expect(responseUsersData[i].first_name).to.equal(fixtures.users[i].first_name);\n        expect(responseUsersData[i].last_name).to.equal(fixtures.users[i].last_name);\n        expect(responseUsersData[i].avatar).to.equal(fixtures.users[i].avatar);\n    }\n});",
              "err": {},
              "uuid": "86467222-5ade-4105-b13c-e6106506f348",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/users/2',\n    method: 'GET',\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseUserData = response.body.data;\n    expect(responseUserData.id).to.equal(2);\n    expect(responseUserData.email).to.equal('janet.weaver@reqres.in');\n    expect(responseUserData.first_name).to.equal('Janet');\n    expect(responseUserData.last_name).to.equal('Weaver');\n    expect(responseUserData.avatar).to.equal('https://reqres.in/img/faces/2-image.jpg');\n});",
              "err": {},
              "uuid": "3a532538-3d10-4d50-949e-ccd4a67c9b38",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /users/id for a user that does not exist should return status 404",
              "timedOut": null,
              "duration": 380,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/users/23',\n    method: 'GET',\n    failOnStatusCode: false,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(404);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body).to.be.an('object').that.is.empty;\n});",
              "err": {},
              "uuid": "4e68b5fe-5b65-43e9-bbff-45d04f067d30",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API GET to /colors should return status 200 and a list of colors",
              "timedOut": null,
              "duration": 409,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/colors',\n    method: 'GET',\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.page).to.equal(1);\n    expect(responseBody.per_page).to.equal(6);\n    expect(responseBody.total).to.equal(12);\n    expect(responseBody.total_pages).to.equal(2);\n    expect(responseBody.data).to.have.lengthOf(6);\n    for (let i = 0; i < fixtures.users.length; i += 1) {\n        const responseColorsData = responseBody.data;\n        expect(responseColorsData[i].id).to.equal(fixtures.colors[i].id);\n        expect(responseColorsData[i].name).to.equal(fixtures.colors[i].name);\n        expect(responseColorsData[i].year).to.equal(fixtures.colors[i].year);\n        expect(responseColorsData[i].color).to.equal(fixtures.colors[i].color);\n        expect(responseColorsData[i].pantone_value).to.equal(fixtures.colors[i].pantone_value);\n    }\n});",
              "err": {},
              "uuid": "ff9d6adf-9abf-42b6-b1a5-41d731c0f8c9",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": null,
              "duration": 369,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/colors/2',\n    method: 'GET',\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseColorData = response.body.data;\n    expect(responseColorData.id).to.equal(2);\n    expect(responseColorData.name).to.equal('fuchsia rose');\n    expect(responseColorData.year).to.equal(2001);\n    expect(responseColorData.color).to.equal('#C74375');\n    expect(responseColorData.pantone_value).to.equal('17-2031');\n});",
              "err": {},
              "uuid": "f181355c-fbc3-42d4-baab-97ddb0dcef68",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": null,
              "duration": 361,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: 'colors/23',\n    method: 'GET',\n    failOnStatusCode: false,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(404);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body).to.be.an('object').that.is.empty;\n});",
              "err": {},
              "uuid": "3b95e447-b319-4762-9207-979873128827",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API POST to /users with valid data should return status 201 and the user data",
              "timedOut": null,
              "duration": 369,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    name: 'morpheus',\n    job: 'leader',\n};\n// Act\ncy.request({\n    url: '/users',\n    method: 'POST',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(201);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.name).to.equal(requestBody.name);\n    expect(responseBody.job).to.equal(requestBody.job);\n    expect(responseBody.id).to.be.a('string').and.match(oneToThreeDigits);\n    expect(responseBody.createdAt)\n        .to.be.a('string')\n        .and.match(dateInISOFormat);\n});",
              "err": {},
              "uuid": "8d66cb3d-5e06-4704-b839-65343767a47f",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": null,
              "duration": 369,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    name: 'morpheus',\n    job: 'zion resident',\n};\n// Act\ncy.request({\n    url: '/users/2',\n    method: 'PUT',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.name).to.equal(requestBody.name);\n    expect(responseBody.job).to.equal(requestBody.job);\n    expect(responseBody.updatedAt)\n        .to.be.a('string')\n        .and.match(dateInISOFormat);\n});",
              "err": {},
              "uuid": "5fbb28a7-4e27-4286-b620-33c0cb7e6da2",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": null,
              "duration": 367,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    name: 'morpheus',\n    job: 'zion resident',\n};\n// Act\ncy.request({\n    url: '/users/2',\n    method: 'PATCH',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.name).to.equal(requestBody.name);\n    expect(responseBody.job).to.equal(requestBody.job);\n    expect(responseBody.updatedAt)\n        .to.be.a('string')\n        .and.match(dateInISOFormat);\n});",
              "err": {},
              "uuid": "f6e4ecde-7c2b-4ece-9add-35538f2f1f30",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API DELETE to /users/id for an existing user should return status 204",
              "timedOut": null,
              "duration": 368,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/users/2',\n    method: 'DELETE',\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(204);\n    expect(response.headers['content-length']).to.equal('0');\n});",
              "err": {},
              "uuid": "fed820c4-54d8-476c-80f7-6212f8eb7476",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": null,
              "duration": 361,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    email: 'eve.holt@reqres.in',\n    password: 'pistol',\n};\n// Act\ncy.request({\n    url: '/register',\n    method: 'POST',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.id).to.equal(4);\n    expect(responseBody.token).to.equal('QpwL5tke4Pnpja7X4');\n});",
              "err": {},
              "uuid": "513c8eb6-c40b-4892-b608-d54fe260524c",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /register with missing password should return status 400 and the validation error",
              "timedOut": null,
              "duration": 352,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    email: 'sydney@fife',\n};\n// Act\ncy.request({\n    url: '/register',\n    method: 'POST',\n    body: requestBody,\n    failOnStatusCode: false,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(400);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body.error).to.equal('Missing password');\n});",
              "err": {},
              "uuid": "dc89cbaf-083a-4bef-a3d2-fa887564ed34",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API POST to /login with valid data should return status 200 and the login token",
              "timedOut": null,
              "duration": 360,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    email: 'eve.holt@reqres.in',\n    password: 'pistol',\n};\n// Act\ncy.request({\n    url: '/login',\n    method: 'POST',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body.token).to.equal('QpwL5tke4Pnpja7X4');\n});",
              "err": {},
              "uuid": "00f7e71d-ecc2-4116-8b82-2daf2ce794a0",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /login with missing password should return status 400 and the validation error",
              "timedOut": null,
              "duration": 361,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    email: 'peter@klaven',\n};\n// Act\ncy.request({\n    url: '/login',\n    method: 'POST',\n    body: requestBody,\n    failOnStatusCode: false,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(400);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body.error).to.equal('Missing password');\n});",
              "err": {},
              "uuid": "684ec043-24e2-47ff-9406-03317fd18b27",
              "parentUUID": "c2de8102-95f4-4ba6-9520-a2ee2ef9d25a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86467222-5ade-4105-b13c-e6106506f348",
            "3a532538-3d10-4d50-949e-ccd4a67c9b38",
            "4e68b5fe-5b65-43e9-bbff-45d04f067d30",
            "ff9d6adf-9abf-42b6-b1a5-41d731c0f8c9",
            "f181355c-fbc3-42d4-baab-97ddb0dcef68",
            "3b95e447-b319-4762-9207-979873128827",
            "8d66cb3d-5e06-4704-b839-65343767a47f",
            "5fbb28a7-4e27-4286-b620-33c0cb7e6da2",
            "f6e4ecde-7c2b-4ece-9add-35538f2f1f30",
            "fed820c4-54d8-476c-80f7-6212f8eb7476",
            "513c8eb6-c40b-4892-b608-d54fe260524c",
            "dc89cbaf-083a-4bef-a3d2-fa887564ed34",
            "00f7e71d-ecc2-4116-8b82-2daf2ce794a0",
            "684ec043-24e2-47ff-9406-03317fd18b27"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4624,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}