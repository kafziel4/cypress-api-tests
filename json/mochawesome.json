{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-27T03:41:42.512Z",
    "end": "2024-04-27T03:41:43.299Z",
    "duration": 787,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "66fce8d2-fb5e-44dd-a600-0f9e42e99cd4",
      "title": "",
      "fullFile": "cypress/e2e/colors.cy.ts",
      "file": "cypress/e2e/colors.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "71f8e9e6-b9a3-440f-ae2b-de77318a0c17",
          "title": "ReqRes API Colors endpoints",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors should return status 200 and a list of colors",
              "timedOut": null,
              "duration": 282,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst expectedResponse = colors_1.colors;\n// Act\nrequests.getColors().should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(expectedResponse);\n});",
              "err": {},
              "uuid": "ebee4763-b94f-4182-8ae9-3372b17b1d38",
              "parentUUID": "71f8e9e6-b9a3-440f-ae2b-de77318a0c17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": null,
              "duration": 229,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst expectedResponse = {\n    data: {\n        id: 2,\n        name: 'fuchsia rose',\n        year: 2001,\n        color: '#C74375',\n        pantone_value: '17-2031',\n    },\n};\n// Act\nrequests.getSingleColor(expectedResponse.data.id).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(expectedResponse);\n});",
              "err": {},
              "uuid": "8d4dc299-c4fa-46a9-9016-2a7222fa9d81",
              "parentUUID": "71f8e9e6-b9a3-440f-ae2b-de77318a0c17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": null,
              "duration": 222,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst nonexistentId = 23;\n// Act\nrequests.getSingleColor(nonexistentId).should((response) => {\n    // Assert\n    expect(response.status).to.equal(404);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.be.an('object').that.is.empty;\n});",
              "err": {},
              "uuid": "b5eb8828-4efe-4ba4-b5f0-e4a607b8d9f8",
              "parentUUID": "71f8e9e6-b9a3-440f-ae2b-de77318a0c17",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ebee4763-b94f-4182-8ae9-3372b17b1d38",
            "8d4dc299-c4fa-46a9-9016-2a7222fa9d81",
            "b5eb8828-4efe-4ba4-b5f0-e4a607b8d9f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 733,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}