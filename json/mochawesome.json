{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-27T03:43:21.056Z",
    "end": "2024-04-27T03:43:21.838Z",
    "duration": 782,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "67479a4f-8d2c-4a15-8bb2-087c1c87a0aa",
      "title": "",
      "fullFile": "cypress/e2e/colors.cy.ts",
      "file": "cypress/e2e/colors.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fc60a80c-80c9-45d7-b249-fc140556897f",
          "title": "ReqRes API Colors endpoints",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors should return status 200 and a list of colors",
              "timedOut": null,
              "duration": 273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst expectedResponse = colors_1.colors;\n// Act\nrequests.getColors().should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(expectedResponse);\n});",
              "err": {},
              "uuid": "3d2ef5b5-5432-46f2-806b-d84ab79b1fc3",
              "parentUUID": "fc60a80c-80c9-45d7-b249-fc140556897f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": null,
              "duration": 232,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst expectedResponse = {\n    data: {\n        id: 2,\n        name: 'fuchsia rose',\n        year: 2001,\n        color: '#C74375',\n        pantone_value: '17-2031',\n    },\n};\n// Act\nrequests.getSingleColor(expectedResponse.data.id).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(expectedResponse);\n});",
              "err": {},
              "uuid": "b2b5b42f-9d24-4a4f-8987-dd218c2ee386",
              "parentUUID": "fc60a80c-80c9-45d7-b249-fc140556897f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API Colors endpoints GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst nonexistentId = 23;\n// Act\nrequests.getSingleColor(nonexistentId).should((response) => {\n    // Assert\n    expect(response.status).to.equal(404);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.be.an('object').that.is.empty;\n});",
              "err": {},
              "uuid": "34261d50-818f-4bc9-8d78-3f5383a89280",
              "parentUUID": "fc60a80c-80c9-45d7-b249-fc140556897f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d2ef5b5-5432-46f2-806b-d84ab79b1fc3",
            "b2b5b42f-9d24-4a4f-8987-dd218c2ee386",
            "34261d50-818f-4bc9-8d78-3f5383a89280"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 724,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}