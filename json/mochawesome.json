{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-13T02:41:32.346Z",
    "end": "2023-07-13T02:41:36.251Z",
    "duration": 3905,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "83cd149e-d980-40c0-a04e-e5fe1b725543",
      "title": "",
      "fullFile": "cypress/e2e/reqres.cy.ts",
      "file": "cypress/e2e/reqres.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9061a96e-4e6a-4aa6-a066-d3192533534c",
          "title": "ReqRes API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API GET to /users should return status 200 and a list of users",
              "timedOut": null,
              "duration": 153,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/users',\n    method: 'GET',\n    qs: { page: 2 },\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.page).to.equal(2);\n    expect(responseBody.per_page).to.equal(6);\n    expect(responseBody.total).to.equal(12);\n    expect(responseBody.total_pages).to.equal(2);\n    expect(responseBody.data).to.have.lengthOf(6);\n    for (let i = 0; i < fixtures.users.length; i += 1) {\n        const responseUsersData = responseBody.data;\n        expect(responseUsersData[i].id).to.equal(fixtures.users[i].id);\n        expect(responseUsersData[i].email).to.equal(fixtures.users[i].email);\n        expect(responseUsersData[i].first_name).to.equal(fixtures.users[i].first_name);\n        expect(responseUsersData[i].last_name).to.equal(fixtures.users[i].last_name);\n        expect(responseUsersData[i].avatar).to.equal(fixtures.users[i].avatar);\n    }\n});",
              "err": {},
              "uuid": "b7f7dc4d-1f93-4b98-aa88-a7b2139e5a9e",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/users/2',\n    method: 'GET',\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseUserData = response.body.data;\n    expect(responseUserData.id).to.equal(2);\n    expect(responseUserData.email).to.equal('janet.weaver@reqres.in');\n    expect(responseUserData.first_name).to.equal('Janet');\n    expect(responseUserData.last_name).to.equal('Weaver');\n    expect(responseUserData.avatar).to.equal('https://reqres.in/img/faces/2-image.jpg');\n});",
              "err": {},
              "uuid": "9b3ffdd3-4a45-4779-8ef9-fce125d1154c",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /users/id for a user that does not exist should return status 404",
              "timedOut": null,
              "duration": 314,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/users/23',\n    method: 'GET',\n    failOnStatusCode: false,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(404);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body).to.be.an('object').that.is.empty;\n});",
              "err": {},
              "uuid": "0364552b-0580-493f-a7b3-1a027d29dead",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors should return status 200 and a list of colors",
              "fullTitle": "ReqRes API GET to /colors should return status 200 and a list of colors",
              "timedOut": null,
              "duration": 336,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/colors',\n    method: 'GET',\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.page).to.equal(1);\n    expect(responseBody.per_page).to.equal(6);\n    expect(responseBody.total).to.equal(12);\n    expect(responseBody.total_pages).to.equal(2);\n    expect(responseBody.data).to.have.lengthOf(6);\n    for (let i = 0; i < fixtures.users.length; i += 1) {\n        const responseColorsData = responseBody.data;\n        expect(responseColorsData[i].id).to.equal(fixtures.colors[i].id);\n        expect(responseColorsData[i].name).to.equal(fixtures.colors[i].name);\n        expect(responseColorsData[i].year).to.equal(fixtures.colors[i].year);\n        expect(responseColorsData[i].color).to.equal(fixtures.colors[i].color);\n        expect(responseColorsData[i].pantone_value).to.equal(fixtures.colors[i].pantone_value);\n    }\n});",
              "err": {},
              "uuid": "a5f91e1d-ff7c-4e52-bcc2-e5ce7b4cb5ef",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for an existing color should return status 200 and the color data",
              "fullTitle": "ReqRes API GET to /colors/id for an existing color should return status 200 and the color data",
              "timedOut": null,
              "duration": 301,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/colors/2',\n    method: 'GET',\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseColorData = response.body.data;\n    expect(responseColorData.id).to.equal(2);\n    expect(responseColorData.name).to.equal('fuchsia rose');\n    expect(responseColorData.year).to.equal(2001);\n    expect(responseColorData.color).to.equal('#C74375');\n    expect(responseColorData.pantone_value).to.equal('17-2031');\n});",
              "err": {},
              "uuid": "8c543696-5921-4cf3-a4e1-a61ae5752083",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /colors/id for a color that does not exist should return status 404",
              "fullTitle": "ReqRes API GET to /colors/id for a color that does not exist should return status 404",
              "timedOut": null,
              "duration": 311,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: 'colors/23',\n    method: 'GET',\n    failOnStatusCode: false,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(404);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body).to.be.an('object').that.is.empty;\n});",
              "err": {},
              "uuid": "c035c4e5-f703-445a-8925-874647d4448a",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API POST to /users with valid data should return status 201 and the user data",
              "timedOut": null,
              "duration": 288,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    name: 'morpheus',\n    job: 'leader',\n};\n// Act\ncy.request({\n    url: '/users',\n    method: 'POST',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(201);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.name).to.equal(requestBody.name);\n    expect(responseBody.job).to.equal(requestBody.job);\n    expect(responseBody.id).to.be.a('string').and.match(oneToThreeDigits);\n    expect(responseBody.createdAt)\n        .to.be.a('string')\n        .and.match(dateInISOFormat);\n});",
              "err": {},
              "uuid": "245dcdcb-cdf5-4d4b-8e55-dae9fea0e9fb",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    name: 'morpheus',\n    job: 'zion resident',\n};\n// Act\ncy.request({\n    url: '/users/2',\n    method: 'PUT',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.name).to.equal(requestBody.name);\n    expect(responseBody.job).to.equal(requestBody.job);\n    expect(responseBody.updatedAt)\n        .to.be.a('string')\n        .and.match(dateInISOFormat);\n});",
              "err": {},
              "uuid": "9d626598-dd68-4154-986c-9a33f480683e",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": null,
              "duration": 300,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    name: 'morpheus',\n    job: 'zion resident',\n};\n// Act\ncy.request({\n    url: '/users/2',\n    method: 'PATCH',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.name).to.equal(requestBody.name);\n    expect(responseBody.job).to.equal(requestBody.job);\n    expect(responseBody.updatedAt)\n        .to.be.a('string')\n        .and.match(dateInISOFormat);\n});",
              "err": {},
              "uuid": "12f5ae40-6bde-414e-a5d4-6221131b729b",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API DELETE to /users/id for an existing user should return status 204",
              "timedOut": null,
              "duration": 310,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Act\ncy.request({\n    url: '/users/2',\n    method: 'DELETE',\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(204);\n    expect(response.headers['content-length']).to.equal('0');\n});",
              "err": {},
              "uuid": "1fa6ac5f-30d5-41cc-b12e-3fd38a8c7543",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with valid data should return status 200 and the registration id and token",
              "fullTitle": "ReqRes API POST to /register with valid data should return status 200 and the registration id and token",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    email: 'eve.holt@reqres.in',\n    password: 'pistol',\n};\n// Act\ncy.request({\n    url: '/register',\n    method: 'POST',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    const responseBody = response.body;\n    expect(responseBody.id).to.equal(4);\n    expect(responseBody.token).to.equal('QpwL5tke4Pnpja7X4');\n});",
              "err": {},
              "uuid": "c2afb1a4-0ff0-4925-94e8-f4092e705021",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /register with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /register with missing password should return status 400 and the validation error",
              "timedOut": null,
              "duration": 297,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    email: 'sydney@fife',\n};\n// Act\ncy.request({\n    url: '/register',\n    method: 'POST',\n    body: requestBody,\n    failOnStatusCode: false,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(400);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body.error).to.equal('Missing password');\n});",
              "err": {},
              "uuid": "de5bbf83-6e9f-42c8-8359-24c5ad384607",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with valid data should return status 200 and the login token",
              "fullTitle": "ReqRes API POST to /login with valid data should return status 200 and the login token",
              "timedOut": null,
              "duration": 286,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    email: 'eve.holt@reqres.in',\n    password: 'pistol',\n};\n// Act\ncy.request({\n    url: '/login',\n    method: 'POST',\n    body: requestBody,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body.token).to.equal('QpwL5tke4Pnpja7X4');\n});",
              "err": {},
              "uuid": "6d2dc68f-154d-4d77-86a0-616b7acae04a",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /login with missing password should return status 400 and the validation error",
              "fullTitle": "ReqRes API POST to /login with missing password should return status 400 and the validation error",
              "timedOut": null,
              "duration": 300,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    email: 'peter@klaven',\n};\n// Act\ncy.request({\n    url: '/login',\n    method: 'POST',\n    body: requestBody,\n    failOnStatusCode: false,\n}).should((response) => {\n    // Assert\n    expect(response.status).to.equal(400);\n    expect(response.headers['content-type']).to.equal('application/json; charset=utf-8');\n    expect(response.body.error).to.equal('Missing password');\n});",
              "err": {},
              "uuid": "aff63093-75df-4476-bbc9-28e063ab39e8",
              "parentUUID": "9061a96e-4e6a-4aa6-a066-d3192533534c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7f7dc4d-1f93-4b98-aa88-a7b2139e5a9e",
            "9b3ffdd3-4a45-4779-8ef9-fce125d1154c",
            "0364552b-0580-493f-a7b3-1a027d29dead",
            "a5f91e1d-ff7c-4e52-bcc2-e5ce7b4cb5ef",
            "8c543696-5921-4cf3-a4e1-a61ae5752083",
            "c035c4e5-f703-445a-8925-874647d4448a",
            "245dcdcb-cdf5-4d4b-8e55-dae9fea0e9fb",
            "9d626598-dd68-4154-986c-9a33f480683e",
            "12f5ae40-6bde-414e-a5d4-6221131b729b",
            "1fa6ac5f-30d5-41cc-b12e-3fd38a8c7543",
            "c2afb1a4-0ff0-4925-94e8-f4092e705021",
            "de5bbf83-6e9f-42c8-8359-24c5ad384607",
            "6d2dc68f-154d-4d77-86a0-616b7acae04a",
            "aff63093-75df-4476-bbc9-28e063ab39e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3819,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}