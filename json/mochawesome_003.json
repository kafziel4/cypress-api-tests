{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-27T03:43:28.143Z",
    "end": "2024-04-27T03:43:29.419Z",
    "duration": 1276,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e14c0842-3bfc-4dfd-a472-7c6e69d3d446",
      "title": "",
      "fullFile": "cypress/e2e/users.cy.ts",
      "file": "cypress/e2e/users.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3ff508aa-781f-44d8-aba6-8f78b4073e0a",
          "title": "ReqRes API Users endpoints",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET to /users should return status 200 and a list of users",
              "fullTitle": "ReqRes API Users endpoints GET to /users should return status 200 and a list of users",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst page = 2;\nconst expectedResponse = users_1.users;\n// Act\nrequests.getUsers(page).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(expectedResponse);\n});",
              "err": {},
              "uuid": "9d520afd-54cc-4c65-96c4-b48e6dea02ec",
              "parentUUID": "3ff508aa-781f-44d8-aba6-8f78b4073e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for an existing user should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints GET to /users/id for an existing user should return status 200 and the user data",
              "timedOut": null,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst expectedResponse = {\n    data: {\n        id: 2,\n        email: 'janet.weaver@reqres.in',\n        first_name: 'Janet',\n        last_name: 'Weaver',\n        avatar: 'https://reqres.in/img/faces/2-image.jpg',\n    },\n};\n// Act\nrequests.getSingleUser(expectedResponse.data.id).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(expectedResponse);\n});",
              "err": {},
              "uuid": "d7813e85-2f4c-4cf6-90de-eb18c9b07124",
              "parentUUID": "3ff508aa-781f-44d8-aba6-8f78b4073e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET to /users/id for a user that does not exist should return status 404",
              "fullTitle": "ReqRes API Users endpoints GET to /users/id for a user that does not exist should return status 404",
              "timedOut": null,
              "duration": 209,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst nonexistentId = 23;\n// Act\nrequests.getSingleUser(nonexistentId).should((response) => {\n    // Assert\n    expect(response.status).to.equal(404);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.be.an('object').that.is.empty;\n});",
              "err": {},
              "uuid": "f2de18cb-f0e0-4f64-a6bd-8539406aeb43",
              "parentUUID": "3ff508aa-781f-44d8-aba6-8f78b4073e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST to /users with valid data should return status 201 and the user data",
              "fullTitle": "ReqRes API Users endpoints POST to /users with valid data should return status 201 and the user data",
              "timedOut": null,
              "duration": 224,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst requestBody = {\n    name: 'morpheus',\n    job: 'leader',\n};\n// Act\nrequests.postUser(requestBody).should((response) => {\n    // Assert\n    expect(response.status).to.equal(201);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(requestBody);\n    expect(response.body.id).to.match(constants_1.oneToThreeDigits);\n    expect(response.body.createdAt).to.match(constants_1.dateInISOFormat);\n});",
              "err": {},
              "uuid": "b2efa21d-fa77-4b97-a83b-fa05a1eb0bb3",
              "parentUUID": "3ff508aa-781f-44d8-aba6-8f78b4073e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints PUT to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": null,
              "duration": 225,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst id = 2;\nconst requestBody = {\n    name: 'morpheus',\n    job: 'zion resident',\n};\n// Act\nrequests.putUser(id, requestBody).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(requestBody);\n    expect(response.body.updatedAt).to.match(constants_1.dateInISOFormat);\n});",
              "err": {},
              "uuid": "571e6022-9411-46e2-9606-71b4e67f8b27",
              "parentUUID": "3ff508aa-781f-44d8-aba6-8f78b4073e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "fullTitle": "ReqRes API Users endpoints PATCH to /users/id for an existing user with valid data should return status 200 and the user data",
              "timedOut": null,
              "duration": 227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst id = 2;\nconst requestBody = {\n    name: 'morpheus',\n    job: 'zion resident',\n};\n// Act\nrequests.patchUser(id, requestBody).should((response) => {\n    // Assert\n    expect(response.status).to.equal(200);\n    expect(response.headers[constants_1.headers.contentType]).to.equal(constants_1.jsonContentType);\n    expect(response.body).to.deep.include(requestBody);\n    expect(response.body.updatedAt).to.match(constants_1.dateInISOFormat);\n});",
              "err": {},
              "uuid": "9385ae80-4972-4b26-8bc6-53657bdfb037",
              "parentUUID": "3ff508aa-781f-44d8-aba6-8f78b4073e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE to /users/id for an existing user should return status 204",
              "fullTitle": "ReqRes API Users endpoints DELETE to /users/id for an existing user should return status 204",
              "timedOut": null,
              "duration": 209,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange\nconst id = 2;\n// Act\nrequests.deleteUser(id).should((response) => {\n    // Assert\n    expect(response.status).to.equal(204);\n    expect(response.headers[constants_1.headers.contentLength]).to.equal('0');\n});",
              "err": {},
              "uuid": "631f73bf-f55f-4bc0-be0b-e565d717416b",
              "parentUUID": "3ff508aa-781f-44d8-aba6-8f78b4073e0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9d520afd-54cc-4c65-96c4-b48e6dea02ec",
            "d7813e85-2f4c-4cf6-90de-eb18c9b07124",
            "f2de18cb-f0e0-4f64-a6bd-8539406aeb43",
            "b2efa21d-fa77-4b97-a83b-fa05a1eb0bb3",
            "571e6022-9411-46e2-9606-71b4e67f8b27",
            "9385ae80-4972-4b26-8bc6-53657bdfb037",
            "631f73bf-f55f-4bc0-be0b-e565d717416b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1171,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}